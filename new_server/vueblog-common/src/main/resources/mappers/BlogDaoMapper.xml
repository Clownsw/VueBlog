<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.smilex.vueblog.common.dao.BlogDao">
    <select id="selectBlogPage" resultType="SelectShowBlog">
        SELECT
            blog.id,
            blog.user_id,
            blog.sort_id,
            blog.title,
            blog.description,
            blog.created,
            blog.status AS status,
            sort.NAME AS sort_name,
            sort.order AS sort_order,
            (
            SELECT
            GROUP_CONCAT( `id` ORDER BY mbt.sort )
            FROM
            m_tag AS tag
            RIGHT JOIN ( SELECT * FROM m_blogtag WHERE blogId = blog.id ) AS mbt ON tag.id IN ( mbt.tagId )
            ) AS 'tag_ids',
            (
            SELECT
            GROUP_CONCAT( `name` ORDER BY mbt.sort )
            FROM
            m_tag AS tag
            RIGHT JOIN ( SELECT * FROM m_blogtag WHERE blogId = blog.id ) AS mbt ON tag.id IN ( mbt.tagId )
            ) AS 'tag_names'
        FROM
            m_blog AS blog
            LEFT JOIN m_sort AS sort ON blog.sort_id = sort.id

        <if test="sql != null">
            ${sql}
        </if>

            ORDER BY created DESC
            LIMIT #{pageSize}, #{currentPage}
    </select>

    <select id="selectBlogPageByTagId" resultType="SelectShowBlog">
        SELECT
            blog.id,
            blog.user_id,
            blog.sort_id,
            blog.title,
            blog.description,
            blog.created,
            blog.status AS status,
            sort.NAME AS sort_name,
            sort.order AS sort_order,
            (
            SELECT
            GROUP_CONCAT( `id` ORDER BY mbt.sort )
            FROM
            m_tag AS tag
            RIGHT JOIN ( SELECT * FROM m_blogtag WHERE blogId = blog.id ) AS mbt ON tag.id IN ( mbt.tagId )
            ) AS 'tag_ids',
            (
            SELECT
            GROUP_CONCAT( `name` ORDER BY mbt.sort )
            FROM
            m_tag AS tag
            RIGHT JOIN ( SELECT * FROM m_blogtag WHERE blogId = blog.id ) AS mbt ON tag.id IN ( mbt.tagId )
            ) AS 'tag_names'
        FROM
            m_blog AS blog
            LEFT JOIN m_sort AS sort ON blog.sort_id = sort.id
        WHERE
            blog.id IN (
                SELECT DISTINCT
                blogId
                FROM
                m_blogtag
                WHERE tagId = #{tagId}
            )
        AND
            blog.status = 0
        ORDER BY
        created DESC
        LIMIT #{pageSize}, #{currentPage}
    </select>

    <select id="selectBlogPageBySortId" resultType="SelectBlogInfo">
        SELECT
            blog.id,
            blog.user_id,
            blog.sort_id,
            IF(blog.status = 1, blog_key.title, blog.title) AS title,
            IF(blog.status = 1, blog_key.title, blog.description) AS description,
            blog.created,
            blog.status AS status,
            sort.NAME AS sort_name,
            sort.order AS sort_order,
            (
            SELECT
            GROUP_CONCAT( `id` ORDER BY mbt.sort )
            FROM
            m_tag AS tag
            RIGHT JOIN ( SELECT * FROM m_blogtag WHERE blogId = blog.id ) AS mbt ON tag.id IN ( mbt.tagId )
            ) AS 'tag_ids',
            (
            SELECT
            GROUP_CONCAT( `name` ORDER BY mbt.sort )
            FROM
            m_tag AS tag
            RIGHT JOIN ( SELECT * FROM m_blogtag WHERE blogId = blog.id ) AS mbt ON tag.id IN ( mbt.tagId )
            ) AS 'tag_names'
        FROM
            m_blog AS blog
            LEFT JOIN m_sort AS sort ON blog.sort_id = sort.id
            LEFT JOIN m_blog_key AS blog_key ON blog_key.id = blog.id
        WHERE
            blog.sort_id = #{sortId}
        ORDER BY
        created DESC
        LIMIT #{pageSize}, #{currentPage}
    </select>

    <select id="selectBlogById" resultType="SelectBlogInfo">
        SELECT
            blog.id,
            blog.user_id,
            blog.sort_id,
            IF(blog.status = 1, blog_key.title, blog.title) AS title,
            IF(blog.status = 1, blog_key.title, blog.description) AS description,
            <choose>
                <when test="isAdmin">
                    blog.content,
                </when>

                <otherwise>
                    IF(blog.status = 1, '', blog.content) AS content,
                </otherwise>
            </choose>
            blog.created,
            blog.STATUS AS status,
            sort.NAME AS sort_name,
            sort.ORDER AS sort_order,
            (
            SELECT
            GROUP_CONCAT( `id` ORDER BY mbt.sort )
            FROM
            m_tag AS tag
            RIGHT JOIN ( SELECT * FROM m_blogtag WHERE blogId = blog.id ) AS mbt ON tag.id IN ( mbt.tagId )
            ) AS 'tag_ids',
            (
            SELECT
            GROUP_CONCAT( `name` ORDER BY mbt.sort )
            FROM
            m_tag AS tag
            RIGHT JOIN ( SELECT * FROM m_blogtag WHERE blogId = blog.id ) AS mbt ON tag.id IN ( mbt.tagId )
            ) AS 'tag_names'
        FROM
            m_blog AS blog
            LEFT JOIN m_sort AS sort ON blog.sort_id = sort.id
            LEFT JOIN m_blog_key AS blog_key ON blog_key.id = blog.id
        WHERE
            blog.id = #{id}
    </select>

    <select id="selectBlogCountByTagId" resultType="long">
        SELECT
            COUNT( DISTINCT ( mbt.blogId ) ) AS count
        FROM
            m_blogtag AS mbt
            LEFT JOIN m_blog mb ON mb.id = mbt.blogId
        WHERE
            mbt.tagId = #{tagId}
        AND
            mb.`status` = 0
    </select>

    <select id="selectBlogCountBySortId" resultType="long">
        SELECT
            COUNT(1) as count
        FROM
            m_blog
        WHERE
            sort_id = #{sortId}
    </select>

    <select id="selectBlogByIdAndKey" resultType="Blog">
        SELECT
            blog.*
        FROM
            m_blog AS blog
        LEFT JOIN m_blog_key AS mbk ON blog.id = mbk.id
        WHERE
            blog.id = #{id} AND mbk.`key` = #{key}
    </select>

    <update id="updateBlogKeyById">
        REPLACE INTO m_blog_key(id, title, `key`) VALUES(#{blogId}, #{keyTitle}, #{key})
    </update>

    <select id="selectBlogKeyById" resultType="BlogKey">
        SELECT
            *
        FROM
            m_blog_key
        WHERE
            id = #{id}
    </select>

    <select id="selectCountByCustomSql" resultType="long">
        SELECT
            COUNT(1)
        FROM
            m_blog
        ${sql}
    </select>
</mapper>